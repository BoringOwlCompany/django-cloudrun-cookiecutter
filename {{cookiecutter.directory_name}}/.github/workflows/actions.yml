name: quality

env:
  PROJECT_ID: ${% raw %}{{ secrets.RUN_PROJECT }}{% endraw %}
  RUN_REGION: {{cookiecutter.gcp_region}}
  SERVICE_NAME: django-app

on:
  pull_request:
    branches-ignore:
      - "release/**"
  push:
    branches: [master]

jobs:
  linting:
    name: linting
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master'
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: fetch master and pr commits
        run: |
          git fetch --no-tags --depth=1 origin +refs/heads/${% raw %}{{ github.base_ref }}{% endraw %}
          git fetch --no-tags --depth=1 origin ${% raw %}{{ github.sha }}{% endraw %}
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${% raw %}{{ runner.os }}{% endraw %}-pip-3.8
          restore-keys: |
            ${% raw %}{{ runner.os }}{% endraw %}-pip-
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|3.8|${% raw %}{{ hashFiles('.pre-commit-config.yaml') }}{% endraw %}
      - name: install precommit
        run: python -m pip install pre-commit
      - name: run precommit
        id: run-precommit
        # https://github.com/pre-commit/pre-commit/issues/1554 since we have shallow checkouts we need to generate
        # the file list ourselves.
        run: pre-commit run --show-diff-on-failure --files $(git diff --name-only --no-ext-diff -z origin/master..HEAD)

  security:
    name: security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          version: 1.1.4
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${% raw %}{{ runner.os }}{% endraw %}-${% raw %}{{ hashFiles('**/poetry.lock') }}{% endraw %}
      - name: Install Python Packages
        run: poetry install --no-root
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Django Check Deploy
        env:
          DJANGO_SETTINGS_MODULE: settings
        run: poetry run ./manage.py check --deploy --fail-level WARNING

  test:
    name: tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:11.1
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: django
          POSTGRES_DB: django
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          version: 1.1.4
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${% raw %}{{ runner.os }}{% endraw %}-${% raw %}{{ hashFiles('**/poetry.lock') }}{% endraw %}
      - name: Install Python Packages
        run: poetry install --no-root
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Setup Postgres
        env:
          PGPASSWORD: django
        run: |
          psql -h localhost -p 5432 -U postgres -d template1 -c "create extension citext"
          psql -h localhost -p 5432 -U postgres -d template1 -c "create extension hstore"
      - name: Tests
        env:
          DJANGO_SETTINGS_MODULE: settings
          DATABASE_URL: postgres://postgres:django@localhost:5432/django
          CONN_MAX_AGE: 600
        run: |
          mkdir test-reports
          poetry run pytest --tb=native --durations=20 --create-db --nomigrations --log-level=ERROR --cov=apps --cov-report html:test-reports/coverage --junitxml=test-reports/junit.xml
      - name: Store Test Results
        uses: actions/upload-artifact@v1
        with:
          name: python-test-results
          path: test-reports/

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test
    if: github.ref == 'refs/heads/master'
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup gcloud tools
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "291.0.0"
          service_account_key: ${% raw %}{{ secrets.RUN_SA_KEY }}{% endraw %}
          project_id: {{cookiecutter.project_name}}
      - name: deploy
        run: gcloud builds submit --config .cloudbuild/deploy.yaml --substitutions=_CURRENT_HOST="${% raw %}{{ secrets.RUN_DOMAIN }}{% endraw %}"
